-----邻接矩阵存储法：测试开始-----
·建立了一个无向图，邻接矩阵如下：
0 156 0 0 246 0 0 0 0 0 0 0 0 0 0 0 0 462 0 0 171 0 157 0 363 
156 0 323 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 323 0 151 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 151 0 0 545 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
246 0 0 0 0 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 545 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 83 224 0 0 0 0 0 0 0 0 0 0 0 0 192 0 0 0 
0 0 0 0 0 0 83 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 224 0 0 209 0 0 0 0 217 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 209 0 116 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 116 0 180 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 180 0 157 251 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 157 0 342 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 251 342 0 111 208 0 0 0 0 0 382 0 0 0 
0 0 0 0 0 0 0 0 217 0 0 0 0 111 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 208 0 0 335 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 335 0 0 0 0 0 0 0 0 0 
462 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 212 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 212 0 135 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 135 0 174 0 0 0 0 
171 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 174 0 0 0 0 0 
0 0 0 0 0 0 192 0 0 0 0 0 0 382 0 0 0 0 0 0 0 0 0 0 0 
157 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 171 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 171 0 0 
363 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
·转换为以邻接表存储，邻接表如下：
v0: (v24, 363) (v22, 157) (v20, 171) (v17, 462) (v4, 246) (v1, 156) 
v1: (v2, 323) (v0, 156) 
v2: (v3, 151) (v1, 323) 
v3: (v5, 545) (v2, 151) 
v4: (v5, 174) (v0, 246) 
v5: (v4, 174) (v3, 545) 
v6: (v21, 192) (v8, 224) (v7, 83) 
v7: (v6, 83) 
v8: (v14, 217) (v9, 209) (v6, 224) 
v9: (v10, 116) (v8, 209) 
v10: (v11, 180) (v9, 116) 
v11: (v13, 251) (v12, 157) (v10, 180) 
v12: (v13, 342) (v11, 157) 
v13: (v21, 382) (v15, 208) (v14, 111) (v12, 342) (v11, 251) 
v14: (v13, 111) (v8, 217) 
v15: (v16, 335) (v13, 208) 
v16: (v15, 335) 
v17: (v18, 212) (v0, 462) 
v18: (v19, 135) (v17, 212) 
v19: (v20, 174) (v18, 135) 
v20: (v19, 174) (v0, 171) 
v21: (v13, 382) (v6, 192) 
v22: (v23, 171) (v0, 157) 
v23: (v22, 171) 
v24: (v0, 363) 
(下面所有操作仍基于邻接矩阵进行)
·深度优先搜索算法
DFS: v0 v1 v2 v3 v5 v4 v17 v18 v19 v20 v22 v23 v24 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15 v16 v21 
深度优先森林: v0(v1(v2(v3(v5(v4)))),v17(v18(v19(v20))),v22(v23),v24),v6(v7,v8(v9(v10(v11(v12(v13(v14,v15(v16),v21)))))))
深度优先序列：v0 v1 v2 v3 v5 v4 v17 v18 v19 v20 v22 v23 v24 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15 v16 v21 
深度优先编号：1 2 3 4 6 5 14 15 16 17 18 19 20 21 22 23 24 7 8 9 10 25 11 12 13 
·深度优先搜索算法（非递归）
DFS: v0 v1 v2 v3 v5 v4 v17 v18 v19 v20 v22 v23 v24 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15 v16 v21 
深度优先森林: v0(v1(v2(v3(v5(v4)))),v17(v18(v19(v20))),v22(v23),v24),v6(v7,v8(v9(v10(v11(v12(v13(v14,v15(v16),v21)))))))
深度优先序列：v0 v1 v2 v3 v5 v4 v17 v18 v19 v20 v22 v23 v24 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15 v16 v21 
深度优先编号：1 2 3 4 6 5 14 15 16 17 18 19 20 21 22 23 24 7 8 9 10 25 11 12 13 
·广度优先搜索算法
BFS: v0 v1 v4 v17 v20 v22 v24 v2 v5 v18 v19 v23 v3 
v6 v7 v8 v21 v9 v14 v13 v10 v11 v12 v15 v16 
广度优先森林：v0(v1(v2(v3)),v4(v5),v17(v18),v20(v19),v22(v23),v24),v6(v7,v8(v9(v10),v14),v21(v13(v11,v12,v15(v16))))
广度优先序列：v0 v1 v4 v17 v20 v22 v24 v2 v5 v18 v19 v23 v3 v6 v7 v8 v21 v9 v14 v13 v10 v11 v12 v15 v16 
广度优先编号：1 2 8 13 3 9 14 15 16 18 21 22 23 20 19 24 25 4 10 11 5 17 6 12 7 
-----邻接矩阵存储法：测试结束-----

-----邻接表存储法：测试开始-----
·建立了一个有向图，邻接表如下：
v0: (v1, 6) (v2, 10) 
v1: (v2, 12) (v3, 11) 
v2: (v3, 12) 
v3: 
v4: (v1, 14) (v8, 6) 
v5: (v3, 4) (v4, 4) (v8, 12) 
v6: (v2, 8) (v3, 3) (v5, 7) (v8, 16) (v9, 4) 
v7: (v2, 16) 
v8: (v9, 13) 
v9: (v7, 7) 
·转换为以邻接矩阵存储，邻接矩阵如下：
0 6 10 0 0 0 0 0 0 0 
0 0 12 11 0 0 0 0 0 0 
0 0 0 12 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 14 0 0 0 0 0 0 6 0 
0 0 0 4 4 0 0 0 12 0 
0 0 8 3 0 7 0 0 16 4 
0 0 16 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 13 
0 0 0 0 0 0 0 7 0 0 
(下面所有操作仍基于邻接表进行)
·深度优先搜索算法
DFS: v0 v1 v2 v3 v4 v8 v9 v7 v5 v6 
深度优先森林: v0(v1(v2(v3))),v4(v8(v9(v7))),v5,v6
深度优先序列：v0 v1 v2 v3 v4 v8 v9 v7 v5 v6 
深度优先编号：1 2 3 4 5 9 10 8 6 7 
·深度优先搜索算法（非递归）
DFS: v0 v1 v2 v3 v4 v8 v9 v7 v5 v6 
深度优先森林: v0(v1(v2(v3))),v4(v8(v9(v7))),v5,v6
深度优先序列：v0 v1 v2 v3 v4 v8 v9 v7 v5 v6 
深度优先编号：1 2 3 4 5 9 10 8 6 7 
·广度优先搜索算法
BFS: v0 v1 v2 v3 v4 v8 v9 v7 v5 v6 
广度优先森林：v0(v1(v3),v2),v4(v8(v9(v7))),v5,v6
广度优先序列：v0 v1 v2 v3 v4 v8 v9 v7 v5 v6 
广度优先编号：1 2 3 4 5 9 10 8 6 7 
对于有向图，计算每个顶点的入度、出度和度
v0: 0 2 2
v1: 2 2 4
v2: 4 1 5
v3: 4 0 4
v4: 1 2 3
v5: 1 3 4
v6: 0 5 5
v7: 1 1 2
v8: 3 1 4
v9: 2 1 3
-----邻接表存储法：测试结束-----
